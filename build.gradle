buildscript {
    repositories {
        jcenter()
        maven {
        	name = "Forge"
        	url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

if (file('secrets.properties').exists()) {
	println "Loading parameters from secrets.properties"
	ext.secrets = new Properties()
	file('secrets.properties').withReader {secrets.load(it)}
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply from: 'configuration.gradle'

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

minecraft {
	if (project.ext.has('secrets')) {
		if (secrets.uuid != null)
    		clientRunArgs += ["--uuid ${secrets.uuid}"]
    	if (secrets.username != null)
    		clientRunArgs += ["--username ${secrets.username}"]
    	if (secrets.password != null)
    		clientRunArgs += ["--password ${secrets.password}"]
    	if (secrets.jvmArgs != null) {
    		clientJvmArgs += secrets.jvmArgs
    		serverJvmArgs += secrets.jvmArgs
    	}
    }
    runDir = "run"
    replace '@VERSION@', project.ext.modVersion
    replace '@FINGERPRINT@', project.ext.fingerprint
    replace '@UPDATEURL@', project.ext.updateurl
    mappings = project.ext.snapshot
}

repositories {
    maven { url = "http://chickenbones.net/maven/" }
    maven { url = "http://dvs1.progwml6.com/files/maven" }	// mezz
    maven { url = "http://maven.tterrag.com" }				// Chisel
    maven { url = "https://repo.elytradev.com/" }
}

dependencies {
    //compile "com.github.glitchfiend.biomesoplenty:BiomesOPlenty:1.12.2-7.0.1.2399:deobf"
	deobfCompile "team.chisel:Chisel:MC1.12.2-0.2.1.35"    
    deobfCompile "mezz.jei:jei_1.12.2:4.13.1.224:api"
    runtime "mezz.jei:jei_1.12.2:4.13.1.224"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// Reobfuscate the output of the mod JAR task with SRG names, otherwise the mod won't be able to reference MC classes
reobf {
    coreJar { mappingType = 'SEARGE' }
}

// Define a new task for the contained JAR
// If you want to, you can distribute this as a separate artifact to a Maven
task coreJar(type: Jar) {
    // Copy all compiled files and resources from the source set to the JAR
    // If you have additional source sets, add the same logic here
    from(sourceSets.main.output) {
        // Include the coremod package
        // If you need additional files, add some more includes
        include 'org/orecruncher/dsurround/asm/**'
    }
    
    // Standard coremod manifest definitions
    manifest {
        // Added benefit of separating mod and coremod: No need for FMLCorePluginContainsFMLMod
        attributes 'FMLCorePlugin': "org.orecruncher.dsurround.asm.TransformLoader"
        
        // Strictly speaking not required (right now)
        // Allows Forge to extract the dependency to a local repository (Given that the corresponding PR is merged)
        // If another mod ships the same dependency, it doesn't have to be extracted twice
        attributes 'Maven-Artifact': "${project.group}:${project.archivesBaseName}-core:${project.version}"
    }
    // Add a classifier to the JAR ('-core' at the end of the file name)
    // Distinguishes the mod JAR from the shipped one
    classifier 'core'
    group = 'build'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    description = 'Creates a JAR containing the source code.'
    from sourceSets.main.allSource
    classifier = 'sources'
}

task deobfJar(type: Jar) {
    description = 'Creates a JAR containing the non-obfuscated compiled code.'
    from sourceSets.main.output
    classifier = "deobf"
    
    manifest {
        // The crucial manifest attribute: Make Forge extract the contained JAR
        attributes 'ContainedDeps': coreJar.archivePath.name
        attributes 'FMLAT': 'dsurround_at.cfg'
        attributes 'Maven-Artifact': "${project.group}:${project.archivesBaseName}:${project.version}"
    }
    
}

task signCoreJar(type: SignJar) {

    onlyIf { // Skip the task if our secret data isn't available
        project.hasProperty('keyStore')
    }

	dependsOn reobfCoreJar
	
    keyStore = project.keyStore // This needs to be a path to the keystore file
    alias = project.keyStoreAlias
    storePass = project.keyStorePass
    keyPass = project.keyStoreKeyPass
    inputFile = coreJar.archivePath.absolutePath
    outputFile = coreJar.archivePath.absolutePath
}

// https://gist.github.com/matthewprenger/9b2da059b89433a01c1c
task signJar(type: SignJar) {
    onlyIf { // Skip the task if our secret data isn't available
        project.hasProperty('keyStore')
    }

	dependsOn reobfJar
	
    keyStore = project.keyStore // This needs to be a path to the keystore file
    alias = project.keyStoreAlias
    storePass = project.keyStorePass
    keyPass = project.keyStoreKeyPass
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

build.dependsOn signJar
jar.dependsOn signCoreJar
def libPrefix = 'META-INF/libraries'
jar {
    // Don't include the coremod in the main JAR
    // If you have more coremod-related packages that aren't nested in the main one, add inclusions for them
    exclude 'org/orecruncher/dsurround/asm/**'
    
    // Add the output of the coremod JAR task to the main JAR for later extraction
    from(coreJar.archivePath.absolutePath) {
        include '*' // Due to the way Gradle's copy tasks work, we need this line for the JAR to get added
        into libPrefix
    }
    
    // Add CREDITS.md
    into('/') {
        from('CREDITS.md')
    }
    
    manifest {
        // The crucial manifest attribute: Make Forge extract the contained JAR
        attributes 'ContainedDeps': libPrefix + '/' + coreJar.archivePath.name
        attributes 'FMLAT': 'dsurround_at.cfg'
        attributes 'Maven-Artifact': "${project.group}:${project.archivesBaseName}:${project.version}"
    }
}

//Adds the artifact types added by this script to the actual artifacts list.
artifacts {
    archives sourcesJar
    archives deobfJar
}
