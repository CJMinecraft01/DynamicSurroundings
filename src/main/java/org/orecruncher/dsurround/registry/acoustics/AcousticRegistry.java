/*
 * This file is part of Dynamic Surroundings, licensed under the MIT License (MIT).
 *
 * Copyright (c) OreCruncher
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package org.orecruncher.dsurround.registry.acoustics;

import java.util.Arrays;
import java.util.Map;
import java.util.Objects;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import org.orecruncher.dsurround.ModBase;
import org.orecruncher.dsurround.registry.Registry;
import org.orecruncher.dsurround.registry.RegistryManager;
import org.orecruncher.dsurround.registry.config.ModConfiguration;

import it.unimi.dsi.fastutil.objects.Object2ObjectAVLTreeMap;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.SoundEvent;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;

/**
 * A ILibrary that can also play sounds and default footsteps.
 */
@SideOnly(Side.CLIENT)
public class AcousticRegistry extends Registry {

	/*
	 * The piece parts that are used to make more complicated sound effects
	 */
	private final Map<String, IAcoustic> acoustics = new Object2ObjectAVLTreeMap<>(String.CASE_INSENSITIVE_ORDER);

	/*
	 * The compiled acoustics using one or more acoustic entries
	 */
	private final Map<String, IAcoustic[]> compiled = new Object2ObjectAVLTreeMap<>(String.CASE_INSENSITIVE_ORDER);

	// Special sentinels for equating
	public static final IAcoustic[] EMPTY = {};
	public static final IAcoustic[] NOT_EMITTER = { new NullAcoustic("NOT_EMITTER") };
	public static final IAcoustic[] MESSY_GROUND = { new NullAcoustic("MESSY_GROUND") };

	private int hits;

	public AcousticRegistry() {
		super("Acoustic Registry");
	}

	@Override
	protected void preInit() {
		this.hits = 0;
		this.acoustics.clear();
		this.compiled.put("EMPTY", EMPTY);
		this.compiled.put("NOT_EMITTER", NOT_EMITTER);
		this.compiled.put("MESSY_GROUND", MESSY_GROUND);
	}

	@Override
	protected void init(@Nonnull final ModConfiguration cfg) {
		// Currently nothing is done by the AcousticRegistry. It is
		// a repository of acoustics generated by the actions of
		// other mod features.
	}

	@Override
	protected void complete() {
		ModBase.log().info("[%s] %d cache hits during initialization", getName(), this.hits);
	}

	public void addAcoustic(@Nonnull final IAcoustic acoustic) {
		this.acoustics.put(acoustic.getName(), acoustic);
	}

	@Nullable
	public IAcoustic getAcoustic(@Nonnull final String name) {
		return this.acoustics.get(name);
	}

	@Nonnull
	public IAcoustic[] compileAcoustics(@Nonnull final SoundEvent evt) {
		IAcoustic[] result = this.compiled.get(evt.getSoundName().toString());
		if (result == null) {
			final IAcoustic a = generateAcoustic(evt);
			this.compiled.put(a.getName(), result = new IAcoustic[] { a });
		} else {
			this.hits++;
		}
		return result;
	}

	@Nonnull
	public IAcoustic[] compileAcoustics(@Nonnull final String acousticName) {
		IAcoustic[] result = this.compiled.get(acousticName);
		if (result == null) {
			result = Arrays.stream(acousticName.split(",")).map(fragment -> {
				// See if we have an acoustic for this fragment
				final IAcoustic a = generateAcoustic(fragment);
				if (a == null)
					ModBase.log().warn("Acoustic '%s' not found!", fragment);
				return a;
			}).filter(Objects::nonNull).toArray(IAcoustic[]::new);

			if (result == null || result.length == 0)
				result = EMPTY;
			this.compiled.put(acousticName, result);
		} else {
			this.hits++;
		}

		return result;
	}

	@Nullable
	private IAcoustic generateAcoustic(@Nonnull final String name) {
		IAcoustic a = this.acoustics.get(name);
		if (a == null) {
			// Nope. Doesn't exist yet. It could be a sound name based on location.
			final ResourceLocation loc = new ResourceLocation(name);
			final SoundEvent evt = RegistryManager.SOUND.getSound(loc);
			if (evt != null)
				a = generateAcoustic(evt);
		}
		return a;
	}

	@Nonnull
	private IAcoustic generateAcoustic(@Nonnull final SoundEvent evt) {
		IAcoustic result = this.acoustics.get(evt.getSoundName().toString());
		if (result == null) {
			result = new SimpleAcoustic(evt);
			this.acoustics.put(result.getName(), result);
		}
		return result;
	}

}